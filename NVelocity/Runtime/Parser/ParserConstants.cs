/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.    
*/

namespace NVelocity.Runtime.Parser
{
    using System;

    /* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */

    /// <summary>
    /// 
    /// </summary>
    public class ParserConstants
    {
        /// <summary>End of File. </summary>
        public const int EOF = 0;
        /// <summary>RegularExpression Id. </summary>
        public const int LBRACKET = 1;
        /// <summary>RegularExpression Id. </summary>
        public const int RBRACKET = 2;
        /// <summary>RegularExpression Id. </summary>
        public const int COMMA = 3;
        /// <summary>RegularExpression Id. </summary>
        public const int DOUBLEDOT = 4;
        /// <summary>RegularExpression Id. </summary>
        public const int COLON = 5;
        /// <summary>RegularExpression Id. </summary>
        public const int LEFT_CURLEY = 6;
        /// <summary>RegularExpression Id. </summary>
        public const int RIGHT_CURLEY = 7;
        /// <summary>RegularExpression Id. </summary>
        public const int LPAREN = 8;
        /// <summary>RegularExpression Id. </summary>
        public const int RPAREN = 9;
        /// <summary>RegularExpression Id. </summary>
        public const int REFMOD2_RPAREN = 10;
        /// <summary>RegularExpression Id. </summary>
        public const int ESCAPE_DIRECTIVE = 11;
        /// <summary>RegularExpression Id. </summary>
        public const int SET_DIRECTIVE = 12;
        /// <summary>RegularExpression Id. </summary>
        public const int DOLLAR = 13;
        /// <summary>RegularExpression Id. </summary>
        public const int DOLLARBANG = 14;
        /// <summary>RegularExpression Id. </summary>
        public const int HASH = 17;
        /// <summary>RegularExpression Id. </summary>
        public const int SINGLE_LINE_COMMENT_START = 18;
        /// <summary>RegularExpression Id. </summary>
        public const int DOUBLE_ESCAPE = 19;
        /// <summary>RegularExpression Id. </summary>
        public const int ESCAPE = 20;
        /// <summary>RegularExpression Id. </summary>
        public const int TEXT = 21;
        /// <summary>RegularExpression Id. </summary>
        public const int SINGLE_LINE_COMMENT = 22;
        /// <summary>RegularExpression Id. </summary>
        public const int FORMAL_COMMENT = 23;
        /// <summary>RegularExpression Id. </summary>
        public const int MULTI_LINE_COMMENT = 24;
        /// <summary>RegularExpression Id. </summary>
        public const int WHITESPACE = 26;
        /// <summary>RegularExpression Id. </summary>
        public const int STRING_LITERAL = 27;
        /// <summary>RegularExpression Id. </summary>
        public const int TRUE = 28;
        /// <summary>RegularExpression Id. </summary>
        public const int FALSE = 29;
        /// <summary>RegularExpression Id. </summary>
        public const int NEWLINE = 30;
        /// <summary>RegularExpression Id. </summary>
        public const int MINUS = 31;
        /// <summary>RegularExpression Id. </summary>
        public const int PLUS = 32;
        /// <summary>RegularExpression Id. </summary>
        public const int MULTIPLY = 33;
        /// <summary>RegularExpression Id. </summary>
        public const int DIVIDE = 34;
        /// <summary>RegularExpression Id. </summary>
        public const int MODULUS = 35;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_AND = 36;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_OR = 37;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_LT = 38;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_LE = 39;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_GT = 40;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_GE = 41;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_EQUALS = 42;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_NOT_EQUALS = 43;
        /// <summary>RegularExpression Id. </summary>
        public const int LOGICAL_NOT = 44;
        /// <summary>RegularExpression Id. </summary>
        public const int EQUALS = 45;
        /// <summary>RegularExpression Id. </summary>
        public const int END = 46;
        /// <summary>RegularExpression Id. </summary>
        public const int IF_DIRECTIVE = 47;
        /// <summary>RegularExpression Id. </summary>
        public const int ELSEIF_DIRECTIVE = 48;
        /// <summary>RegularExpression Id. </summary>
        public const int ELSE_DIRECTIVE = 49;
        /// <summary>RegularExpression Id. </summary>
        public const int STOP_DIRECTIVE = 50;
        /// <summary>RegularExpression Id. </summary>
        public const int DIGIT = 51;
        /// <summary>RegularExpression Id. </summary>
        public const int INTEGER_LITERAL = 52;
        /// <summary>RegularExpression Id. </summary>
        public const int FLOATING_POINT_LITERAL = 53;
        /// <summary>RegularExpression Id. </summary>
        public const int EXPONENT = 54;
        /// <summary>RegularExpression Id. </summary>
        public const int LETTER = 55;
        /// <summary>RegularExpression Id. </summary>
        public const int DIRECTIVE_CHAR = 56;
        /// <summary>RegularExpression Id. </summary>
        public const int WORD = 57;
        /// <summary>RegularExpression Id. </summary>
        public const int BRACKETED_WORD = 58;
        /// <summary>RegularExpression Id. </summary>
        public const int ALPHA_CHAR = 59;
        /// <summary>RegularExpression Id. </summary>
        public const int ALPHANUM_CHAR = 60;
        /// <summary>RegularExpression Id. </summary>
        public const int IDENTIFIER_CHAR = 61;
        /// <summary>RegularExpression Id. </summary>
        public const int IDENTIFIER = 62;
        /// <summary>RegularExpression Id. </summary>
        public const int DOT = 63;
        /// <summary>RegularExpression Id. </summary>
        public const int LCURLY = 64;
        /// <summary>RegularExpression Id. </summary>
        public const int RCURLY = 65;
        /// <summary>RegularExpression Id. </summary>
        public const int REFERENCE_TERMINATOR = 66;
        /// <summary>RegularExpression Id. </summary>
        public const int DIRECTIVE_TERMINATOR = 67;
        /// <summary>Lexical state. </summary>
        public const int DIRECTIVE = 0;
        /// <summary>Lexical state. </summary>
        public const int REFMOD2 = 1;
        /// <summary>Lexical state. </summary>
        public const int REFMODIFIER = 2;
        /// <summary>Lexical state. </summary>
        public const int DEFAULT = 3;
        /// <summary>Lexical state. </summary>
        public const int REFERENCE = 4;
        /// <summary>Lexical state. </summary>
        public const int PRE_DIRECTIVE = 5;
        /// <summary>Lexical state. </summary>
        public const int IN_MULTI_LINE_COMMENT = 6;
        /// <summary>Lexical state. </summary>
        public const int IN_FORMAL_COMMENT = 7;
        /// <summary>Lexical state. </summary>
        public const int IN_SINGLE_LINE_COMMENT = 8;
        /// <summary>Literal token values. </summary>
        public readonly static string[] TokenImage = new string[] { "<EOF>", "\"[\"", "\"]\"", "\",\"", "\"..\"", "\":\"", "\"{\"", "\"}\"", "\"(\"", "<RPAREN>", "\")\"", "<ESCAPE_DIRECTIVE>", "<SET_DIRECTIVE>", "<DOLLAR>", "<DOLLARBANG>", "<token of kind 15>", "\"#*\"", "\"#\"", "\"##\"", "\"\\\\\\\\\"", "\"\\\\\"", "<TEXT>", "<SINGLE_LINE_COMMENT>", "\"*#\"", "\"*#\"", "<token of kind 25>", "<WHITESPACE>", "<STRING_LITERAL>", "\"true\"", "\"false\"", "<NEWLINE>", "\"-\"", "\"+\"", "\"*\"", "\"/\"", "\"%\"", "<LOGICAL_AND>", "<LOGICAL_OR>", "<LOGICAL_LT>", "<LOGICAL_LE>", "<LOGICAL_GT>", "<LOGICAL_GE>", "<LOGICAL_EQUALS>", "<LOGICAL_NOT_EQUALS>", "<LOGICAL_NOT>", "\"=\"", "<END>", "<IF_DIRECTIVE>", "<ELSEIF_DIRECTIVE>", "<ELSE_DIRECTIVE>", "<STOP_DIRECTIVE>", "<DIGIT>", "<INTEGER_LITERAL>", "<FLOATING_POINT_LITERAL>", "<EXPONENT>", "<LETTER>", "<DIRECTIVE_CHAR>", "<WORD>", "<BRACKETED_WORD>", "<ALPHA_CHAR>", "<ALPHANUM_CHAR>", "<IDENTIFIER_CHAR>", "<IDENTIFIER>", "<DOT>", "\"{\"", "\"}\"", "<REFERENCE_TERMINATOR>", "<DIRECTIVE_TERMINATOR>" };
    }
}